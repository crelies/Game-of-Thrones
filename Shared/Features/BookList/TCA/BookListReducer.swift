//
//  BookListReducer.swift
//  Game-of-Thrones-SwiftUI
//
//  Created Christian Elies on 29/07/2022.
//  Copyright Â© 2022 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

enum BookListModule {}

extension BookListModule {
    static var reducer: Reducer<BookListState, BookListAction, BookListEnvironment> {
        .init { state, action, environment in
            switch action {
            case .onAppear:
                guard case ViewState.loading = state.viewState else {
                    return .none
                }
                return .init(value: .refresh)

            case .refresh:
                return .init(value: .fetchBooks)

            case .fetchBooks:
                return environment.bookClient.fetchBooks(state.page, state.pageSize)
                    .receive(on: environment.mainQueue())
                    .catchToEffect(BookListAction.booksResponse)

            case let .booksResponse(.success(books)):
                state.viewState = .loaded(.init(uniqueElements: books))

            case let .booksResponse(.failure(error)):
                state.viewState = .failure(error)

            case let .setSelection(selection: .some(id)):
                state.selection = .init(url: id)

            case .setSelection(selection: .none):
                state.selection = nil

            case .alertDismissed:
                state.alertState = nil
            }
            return .none
        }
    }
}
