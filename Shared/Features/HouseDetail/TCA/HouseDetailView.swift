//
//  HouseDetailView.swift
//  Game-of-Thrones-SwiftUI
//
//  Created Christian Elies on 29.08.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture
import SwiftUI

struct HouseDetailView: View {
    let store: Store<HouseDetailState, HouseDetailAction>

    var body: some View {
        WithViewStore(
            store.scope(
                state: { $0.view },
                action: { (viewAction: HouseDetailView.Action) in
                    viewAction.feature
                }
            )
        ) { viewStore in
            VStack {
                switch viewStore.viewState {
                case let .loaded(dataModel):
                    loaded(viewStore: viewStore, dataModel: dataModel)
                case .loading:
                    ProgressView()
                        .onAppear {
                            viewStore.send(.onAppear)
                        }
                case let .failure(error):
                    Text(error.localizedDescription)
                }
            }
            #if os(macOS)
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text(viewStore.viewState.value?.name ?? "House Details")
                }
            }
            #else
            .navigationTitle(viewStore.viewState.value?.name ?? "House Details")
            #endif
        }
    }
}

private extension HouseDetailView {
    func loaded(
        viewStore: ViewStore<HouseDetailView.State, Action>,
        dataModel: HouseDataModel
    ) -> some View {
        List {
            factsView(
                viewStore: viewStore,
                name: dataModel.name,
                region: dataModel.region,
                coatOfArms: dataModel.coatOfArms,
                words: dataModel.words,
                currentLord: dataModel.currentLord,
                heir: dataModel.heir,
                overlord: dataModel.overlord,
                founded: dataModel.founded,
                founder: dataModel.founder,
                diedOut: dataModel.diedOut
            )

            Section(header: Text("\(dataModel.titles.count) Titles")) {
                titles(titles: dataModel.titles)
            }

            Section(header: Text("\(dataModel.seats.count) Seats")) {
                seats(seats: dataModel.seats)
            }

            Section(header: Label("\(dataModel.ancestralWeapons.count) Ancestral Weapons", systemImage: "hammer")) {
                ancestralWeapons(ancestralWeapons: dataModel.ancestralWeapons)
            }

            Section(header: Label("\(dataModel.cadetBranches.count) Cadet Branches", systemImage: "building.columns")) {
                HouseCadetBranchesView(cadetBranches: dataModel.cadetBranches)
            }

            Section(header: Label("\(dataModel.swornMembers.count) Sworn Members", systemImage: "flag.2.crossed")) {
                ForEach(dataModel.swornMembers, id: \.self) { swornMember in
                    Label {
                        Text("Member (id: \(swornMember.pathComponents.last ?? ""))")
                    } icon: {
                        Image(systemName: "person")
                    }
                    .onTapGesture {
                        viewStore.send(.setSelectedCharacter(url: swornMember))
                    }
                }
            }
        }
        .navigationDestination(
            isPresented: viewStore.binding(
                get: { $0.selectedCharacter != nil },
                send: Action.setSelectedCharacterPresented
            )
        ) {
            IfLetStore(
                store.scope(state: \.selectedCharacter, action: HouseDetailAction.characterDetail),
                then: CharacterDetailView.init
            )
        }
        .navigationDestination(for: URL.self) { url in
            Text(url.absoluteString)
        }
    }

    @ViewBuilder
    func factsView(
        viewStore: ViewStore<HouseDetailView.State, HouseDetailView.Action>,
        name: String,
        region: String,
        coatOfArms: String,
        words: String,
        currentLord: URL?,
        heir: URL?,
        overlord: URL?,
        founded: String,
        founder: URL?,
        diedOut: String
    ) -> some View {
        Section(header: Text("Facts")) {
            VStack(alignment: .leading) {
                Text("Name")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Text(name)
                    .lineLimit(nil)
            }

            VStack(alignment: .leading) {
                Text("Region")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Label(region, systemImage: "mappin.and.ellipse")
            }

            VStack(alignment: .leading) {
                Text("Coat of arms")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Label(coatOfArms, systemImage: "bookmark")
            }

            VStack(alignment: .leading) {
                Text("Words")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Text(words)
                    .lineLimit(nil)
            }

            VStack(alignment: .leading) {
                Text("Founded")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Label(founded, systemImage: "calendar")
            }

            VStack(alignment: .leading) {
                Text("Died out")
                    .font(.caption)
                    .foregroundColor(.secondary)

                Label(diedOut, systemImage: "calendar")
            }
        }

        Section(header: Text("Links")) {
            VStack(alignment: .leading) {
                if let currentLord {
                    Label {
                        Text("Current lord (id: \(currentLord.pathComponents.last ?? ""))")
                    } icon: {
                        Image(systemName: "crown")
                    }
                    .onTapGesture {
                        viewStore.send(.setSelectedCharacter(url: currentLord))
                    }
                } else {
                    Text("Current lord")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Text("-")
                }
            }

            VStack(alignment: .leading) {
                if let heir {
                    Label {
                        Text("Heir (id: \(heir.pathComponents.last ?? ""))")
                    } icon: {
                        Image(systemName: "person")
                    }
                    .onTapGesture {
                        viewStore.send(.setSelectedCharacter(url: heir))
                    }
                } else {
                    Text("Heir")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Text("-")
                }
            }

            VStack(alignment: .leading) {
                if let overlord {
                    NavigationLink(value: overlord) {
                        Label {
                            Text("Overlord (id: \(overlord.pathComponents.last ?? ""))")
                        } icon: {
                            Image(systemName: "house")
                        }
                    }
                } else {
                    Text("Overlord")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Text("-")
                }
            }

            VStack(alignment: .leading) {
                if let founder {
                    Label {
                        Text("Founder (id: \(founder.pathComponents.last ?? ""))")
                    } icon: {
                        Image(systemName: "person")
                    }
                    .onTapGesture {
                        viewStore.send(.setSelectedCharacter(url: founder))
                    }
                } else {
                    Text("Founder")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Text("-")
                }
            }
        }
    }
}

private extension HouseDetailView {
    func seats(
        seats: [String]
    ) -> some View {
        ForEach(seats, id: \.self) { seat in
            Text(seat)
        }
    }

    func ancestralWeapons(
        ancestralWeapons: [String]
    ) -> some View {
        ForEach(ancestralWeapons, id: \.self) { ancestralWeapon in
            Text(ancestralWeapon)
        }
    }

    func titles(
        titles: [String]
    ) -> some View {
        ForEach(titles, id: \.self) { title in
            Text(title)
        }
    }
}

struct HouseDetailView_Preview: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            HouseDetailView(
                store: .init(
                    initialState: .init(
                        id: "123",
                        url: URL(string: "https://duckduckgo.com")!
                    ),
                    reducer: HouseDetailModule.reducer,
                    environment: .init(
                        mainQueue: { .main.eraseToAnyScheduler() },
                        fetchHouse: { _, _ in
                            let houseDataModel: HouseDataModel = .mock()
                            return Effect(value: houseDataModel)
                        },
                        fetchCharacter: { _ in .none }
                    )
                )
            )
            .frame(minWidth: 400, minHeight: 700)
        }
    }
}
