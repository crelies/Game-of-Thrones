//
//  HouseDetailView.swift
//  Game-of-Thrones-SwiftUI
//
//  Created Christian Elies on 29.08.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture
import SwiftUI

struct HouseDetailView: View {
    let store: Store<HouseDetailState, HouseDetailAction>

    var body: some View {
        WithViewStore(
            store.scope(
                state: { $0.view },
                action: { (viewAction: HouseDetailView.Action) in
                    viewAction.feature
                }
            )
        ) { viewStore in
            switch viewStore.viewState {
            case let .loaded(dataModel):
                loaded(viewStore: viewStore, dataModel: dataModel)
            case .loading:
                ProgressView()
                    .onAppear {
                        viewStore.send(.onAppear)
                    }
            case let .failure(error):
                Text(error.localizedDescription)
            }
        }
    }
}

extension HouseDetailView {
    func loaded(
        viewStore: ViewStore<HouseDetailView.State, Action>,
        dataModel: HouseDataModel
    ) -> some View {
        List {
            HouseFactsView(
                name: dataModel.name,
                region: dataModel.region,
                coatOfArms: dataModel.coatOfArms,
                words: dataModel.words,
                currentLord: dataModel.currentLord,
                heir: dataModel.heir,
                overlord: dataModel.overlord,
                founded: dataModel.founded,
                founder: dataModel.founder,
                diedOut: dataModel.diedOut
            )

            Section(header: Text("\(dataModel.titles.count) Titles")) {
                HouseTitlesView(titles: dataModel.titles)
            }

            Section(header: Text("\(dataModel.seats.count) Seats")) {
                HouseSeatsView(seats: dataModel.seats)
            }

            Section(header: Text("\(dataModel.ancestralWeapons.count) Ancestral Weapons")) {
                HouseAncestralWeaponsView(ancestralWeapons: dataModel.ancestralWeapons)
            }

            Section(header: Text("\(dataModel.cadetBranches.count) Cadet Branches")) {
                HouseCadetBranchesView(cadetBranches: dataModel.cadetBranches)
            }

            Section(header: Text("\(dataModel.swornMembers.count) Sworn Members")) {
                HouseSwornMembersView(swornMembers: dataModel.swornMembers)
            }
        }
        .listStyle(.sidebar)
        .navigationTitle(dataModel.name)
        .alert(self.store.scope(state: \.alertState), dismiss: .alertDismissed)
    }
}
