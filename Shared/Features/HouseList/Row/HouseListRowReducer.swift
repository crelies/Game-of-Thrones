//
//  HouseListRowReducer.swift
//  Game-of-Thrones-SwiftUI
//
//  Created Christian Elies on 29.08.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

enum HouseListRowModule {}

extension HouseListRowModule {
    static var reducer: Reducer<HouseListRowState, HouseListRowAction, HouseListRowEnvironment> {
        Reducer<HouseListRowState, HouseListRowAction, HouseListRowEnvironment> { state, action, environment in
            switch action {
            case .onAppear: ()
            case let .setNavigation(selection):
                guard let selection = selection else {
                    state.selection = nil
                    return .none
                }
                return .init(value: .fetchHouse(id: selection))
            case let .fetchHouse(id):
                state.isLoading = true
                return environment
                    .fetchHouse(id, state.dataModel.url)
                    .receive(on: environment.mainQueue())
                    .catchToEffect()
                    .map { HouseListRowAction.houseResponse(id: id, $0) }
            case let .houseResponse(id, result):
                switch result {
                case let .success(dataModel):
                    let selection: Identified<UUID, HouseDetailState> = .init(.init(dataModel: dataModel), id: id)
                    state.selection = selection
                case let .failure(error):
                    state.alertState = .init(title: TextState("Error"), message: TextState(error.localizedDescription))
                }

                state.isLoading = false
            case .house: ()
            case .alertDismissed:
                state.alertState = nil
            }
            return .none
        }
    }
}
