//
//  AppReducer.swift
//  Game-of-Thrones-SwiftUI
//
//  Created Christian Elies on 31.08.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

enum AppModule {}

extension AppModule {
    static var reducer: Reducer<AppState, AppAction, AppEnvironment> {
        Reducer.combine(
            HouseListModule.reducer
                .pullback(
                    state: \.houseListState,
                    action: /AppAction.houseList,
                    environment: { _ in
                        HouseListEnvironment(
                            mainQueue: { DispatchQueue.main.eraseToAnyScheduler() },
                            fetchHouses: { page, pageSize in
                                Effect.task {
                                    try await APIService().getHouses(page: page, pageSize: pageSize)
                                        .compactMap { house -> HouseMetadataModel? in
                                            guard let url = house.url else {
                                                return nil
                                            }
                                            guard let name = house.name else {
                                                return nil
                                            }
                                            return HouseMetadataModel(url: url, name: name)
                                        }
                                }
                                .mapError { HouseListError.fetchError(underlying: $0 as NSError) }
                                .eraseToEffect()
                            }, fetchHouse: { id, url in
                                Effect.task {
                                    let houseResponseModel = try await APIService().getHouse(atURL: url)
                                    return try houseResponseModel.houseDataModel(id: id)
                                }
                                .mapError { HouseListError.fetchError(underlying: $0 as NSError) }
                                .eraseToEffect()
                            }
                        )
                    }
                )
            ,
            Reducer<AppState, AppAction, AppEnvironment> { state, action, environment in
                switch action {
                case .onAppear: ()
                case let .setSelectedNavigationItem(navigationItem):
                    state.selectedNavigationItem = navigationItem
                default: ()
                }
                return .none
            }
        )
    }
}
